package com.javarush.task.task20.task2027;

        import java.util.ArrayList;
        import java.util.Arrays;
        import java.util.List;

/*
Кроссворд
*/
public class Solution {
    public static void main(String[] args) {
        int[][] crossword = new int[][]{
                {'f', 'd', 'e', 'r', 'l', 'k'},
                {'u', 's', 'a', 'm', 'e', 'o'},
                {'l', 'n', 'g', 'r', 'o', 'v'},
                {'m', 'l', 'p', 'r', 'r', 'h'},
                {'p', 'o', 'e', 'e', 'j', 'j'}
        };
        System.out.println(detectAllWords(crossword, "home", "same"));
        /*
Ожидаемый результат
home - (5, 3) - (2, 0)
same - (1, 1) - (4, 1)
         */
    }

    public static List<Word> detectAllWords(int[][] crossword, String... words) {
        List<Word> resultList = new ArrayList<>();
        for (String word : words) {
            for (int i = 0; i < crossword.length; i++) {
                for (int j = 0; j < crossword[0].length; j++) {
                    char currentChar = (char) crossword[i][j];

                    //Checking for concurrence of 1-st character of the word
                    if (word.charAt(0) == currentChar){
                    
                        //Setting all possible directions of word
                        List<Integer> deltaX = new ArrayList<>(Arrays.asList(-1, 0, 1));
                        List<Integer> deltaY = new ArrayList<>(Arrays.asList(-1, 0, 1));
                        
                        if (j - (word.length() - 1) < 0) deltaX.remove((Integer) (-1)); // word cannot be directed to the left
                        if (j + word.length() > crossword[i].length) deltaX.remove((Integer) 1); // word cannot be directed to the right
                        if (i - (word.length() - 1) < 0) deltaY.remove((Integer) (-1)); // word cannot be directed upward;
                        if (i + word.length() > crossword.length) deltaY.remove((Integer) 1); // word cannot be directed downward;

                        //Checking for the rest of the word in all possible directions until a letter doesn't match.
                        for (Integer dX : deltaX) {
                            for (Integer dY : deltaY) {
                                int k;
                                for (k = 1; k < word.length(); k++)
                                    if (crossword[i + dY * k][j + dX * k] != word.charAt(k)) break;
                                    
                                // If k equals length of the word, it means it's been no break in the loop and full match (word) has been found!
                                if (k == word.length()) {
                                    Word foundWord = new Word(word);
                                    foundWord.setStartPoint(j, i);
                                    foundWord.setEndPoint(j + dX * (word.length() - 1), i + dY * (word.length() - 1));
                                    resultList.add(foundWord);
                                }
                            }
                        }
                    }
                }
            }
        }
        return resultList;
    }

    public static class Word {
        private String text;
        private int startX;
        private int startY;
        private int endX;
        private int endY;

        public Word(String text) {
            this.text = text;
        }

        public void setStartPoint(int i, int j) {
            startX = i;
            startY = j;
        }

        public void setEndPoint(int i, int j) {
            endX = i;
            endY = j;
        }

        @Override
        public String toString() {
            return String.format("%s - (%d, %d) - (%d, %d)", text, startX, startY, endX, endY);
        }
    }
}
